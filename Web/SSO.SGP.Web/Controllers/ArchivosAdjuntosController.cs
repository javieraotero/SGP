using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SSO.SGP.EntidadesDeNegocio;
using Syncrosoft.Framework.Controles.Mvc.JQuery.Datatables;
using SSO.SGP.AccesoADatos;
using SSO.SGP.EntidadesDeNegocio.Vistas;
using System;
using System.Data;
using System.Collections.Generic;
using System.IO;
using Syncrosoft.Framework.Utils.Logs;
using DocumentFormat.OpenXml.Packaging;
using OpenXmlPowerTools;
using System.Drawing.Imaging;
using System.Xml.Linq;
using System.Text;
using SGP.Sentencia.Web;
using SSO.SGP.Web;

/// <summary>
///  CODE GENERATED BY Xeus Technology 
///  Date: 28/07/2016 22:02:35
///  Version: 3
/// <summary>
namespace Xeus.Sentencia.Web.Controllers
{
    public class ArchivosAdjuntosController : Controller
    {
        private ExpedientesDocumentoadmAD oArchivosAdjuntos = new ExpedientesDocumentoadmAD();
        private ImagenesrrhhAD oImagenes = new ImagenesrrhhAD();

        //private SentenciasRepositorio oSentencias = new SentenciasRepositorio();
        //private SumariosRepositorio oSumarios = new SumariosRepositorio();

        #region Views

        public ActionResult Default()
        {
            return View();
        }

        public ActionResult Index()
        {
            return View();
        }
        public ActionResult Crear(int expediente)
        {
            ViewBag.Expediente = expediente;
            //ViewBag.Sumario = oSumarios.ObtenerOptions().ToList();
            return View();
        }

        //public ActionResult Editar(int id = 0)
        //{
        //    ArchivosAdjuntos archivosadjuntos = oArchivosAdjuntos.ObtenerPorId(id);
        //    if (archivosadjuntos == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(archivosadjuntos);
        //}

        public ActionResult File(int expediente) {
            ViewBag.Expediente = expediente;
            return View();
        }

        public ActionResult FileAgente(int agente)
        {
            ViewBag.Agente = agente;
            return View();
        }

        public ActionResult FileLicencia(int agente)
        {
            ViewBag.Agente = agente;
            return View();
        }

        [HttpGet]
        public FileResult GetHtml(string doc)
        {
            string archivo = Server.MapPath("/Files/Documentos/" + doc);
            string directorio = Server.MapPath("/") + "Files\\Documentos";
            ConvertToHtml(archivo, directorio);
            //string html = System.IO.File.ReadAllText(HttpContext.Server.MapPath("~/Files/Documentos/test-01.html"));
            return File(Server.MapPath("~/Files/Documentos/" + doc.Replace("docx", "html")), "text/html");
        }

        #endregion

        #region HttpPost

        public static void ConvertToHtml(string file, string outputDirectory)
        {
            var fi = new FileInfo(file);
            Console.WriteLine(fi.Name);
            byte[] byteArray = System.IO.File.ReadAllBytes(fi.FullName);
            using (MemoryStream memoryStream = new MemoryStream())
            {
                memoryStream.Write(byteArray, 0, byteArray.Length);
                using (WordprocessingDocument wDoc = WordprocessingDocument.Open(memoryStream, true))
                {

                    var destFileName = new FileInfo(fi.Name.Replace(".docx", ".html"));
                    var destFileNamecss = new FileInfo(fi.Name.Replace(".docx", ".css"));
                    if (outputDirectory != null && outputDirectory != string.Empty)
                    {
                        DirectoryInfo di = new DirectoryInfo(outputDirectory);
                        if (!di.Exists)
                        {
                            throw new OpenXmlPowerToolsException("Output directory does not exist");
                        }
                        destFileName = new FileInfo(Path.Combine(di.FullName, destFileName.Name));
                        destFileNamecss = new FileInfo(Path.Combine(di.FullName, destFileNamecss.Name));
                    }
                    var imageDirectoryName = destFileName.FullName.Substring(0, destFileName.FullName.Length - 5) + "_files";
                    int imageCounter = 0;

                  //  var pageTitle = fi.FullName;
                    var part = wDoc.CoreFilePropertiesPart;
                    if (part != null)
                    {
                       // pageTitle = (string)part.GetXDocument().Descendants(DC.title).FirstOrDefault() ?? fi.FullName;
                    }

                    // TODO: Determine max-width from size of content area.
                    WmlToHtmlConverterSettings settings = new WmlToHtmlConverterSettings()
                    {
                        //AdditionalCss = "body { margin: 1cm auto; max-width: 20cm; padding: 0; }",
                        //PageTitle = pageTitle,
                        FabricateCssClasses = true,
                        CssClassPrefix = "pt-",
                        RestrictToSupportedLanguages = false,
                        RestrictToSupportedNumberingFormats = false,

                        ImageHandler = imageInfo =>
                        {
                            DirectoryInfo localDirInfo = new DirectoryInfo(imageDirectoryName);
                            if (!localDirInfo.Exists)
                                localDirInfo.Create();
                            ++imageCounter;
                            string extension = imageInfo.ContentType.Split('/')[1].ToLower();
                            ImageFormat imageFormat = null;
                            if (extension == "png")
                                imageFormat = ImageFormat.Png;
                            else if (extension == "gif")
                                imageFormat = ImageFormat.Gif;
                            else if (extension == "bmp")
                                imageFormat = ImageFormat.Bmp;
                            else if (extension == "jpeg")
                                imageFormat = ImageFormat.Jpeg;
                            else if (extension == "tiff")
                            {
                                // Convert tiff to gif.
                                extension = "gif";
                                imageFormat = ImageFormat.Gif;
                            }
                            else if (extension == "x-wmf")
                            {
                                extension = "wmf";
                                imageFormat = ImageFormat.Wmf;
                            }

                            // If the image format isn't one that we expect, ignore it,
                            // and don't return markup for the link.
                            if (imageFormat == null)
                                return null;

                            string imageFileName = imageDirectoryName + "/image" +
                                imageCounter.ToString() + "." + extension;
                            try
                            {
                                imageInfo.Bitmap.Save(imageFileName, imageFormat);
                            }
                            catch (System.Runtime.InteropServices.ExternalException)
                            {
                                return null;
                            }
                            string imageSource = "/files/documentos/" + localDirInfo.Name + "/image" +
                                imageCounter.ToString() + "." + extension;

                            XElement img = new XElement(Xhtml.img,
                                new XAttribute(NoNamespace.src, imageSource),
                                imageInfo.ImgStyleAttribute,
                                imageInfo.AltText != null ?
                                    new XAttribute(NoNamespace.alt, imageInfo.AltText) : null);
                            return img;
                        }
                    };
                    XElement htmlElement = WmlToHtmlConverter.ConvertToHtml(wDoc, settings);

                    // Produce HTML document with <!DOCTYPE html > declaration to tell the browser
                    // we are using HTML5.
                    var html = new XDocument(
                        new XDocumentType("html", null, null, null),
                        htmlElement);

                    var css = html.Descendants().SingleOrDefault(p => p.Name.LocalName == "style");


                    // Note: the xhtml returned by ConvertToHtmlTransform contains objects of type
                    // XEntity.  PtOpenXmlUtil.cs define the XEntity class.  See
                    // http://blogs.msdn.com/ericwhite/archive/2010/01/21/writing-entity-references-using-linq-to-xml.aspx
                    // for detailed explanation.
                    //
                    // If you further transform the XML tree returned by ConvertToHtmlTransform, you
                    // must do it correctly, or entities will not be serialized properly.

                    var htmlString = html.ToString(SaveOptions.DisableFormatting);
                    System.IO.File.WriteAllText(destFileName.FullName, htmlString, Encoding.UTF8);
                    var cssString = css.ToString(SaveOptions.DisableFormatting);
                    System.IO.File.WriteAllText(destFileNamecss.FullName, cssString, Encoding.UTF8);
                }
            }
        }

        [HttpPost]
        public JsonResult UploadFiles(int? expediente)
        {
            var r = new List<ViewDataUploadFilesResult>();
            foreach (string file in Request.Files)
            {
                ExpedientesDocumentoadm archivo = new ExpedientesDocumentoadm();

                HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

                archivo.NombreOriginal = hpf.FileName;
                archivo.Extension = "xxx";
                //archivo.Path = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName));               
                archivo.Usuario = SessionHelper.IdUsuario.Value;
                archivo.Confirmado = false;
                archivo.FechaAlta = DateTime.Now;
                archivo.Expediente = expediente;

                if (hpf.ContentLength == 0)
                    continue;
                string savedFileName = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName));
                hpf.SaveAs(savedFileName);

                this.oArchivosAdjuntos.Guardar(archivo);

                r.Add(new ViewDataUploadFilesResult()
                {
                    Name = hpf.FileName,
                    Length = hpf.ContentLength,
                    Type = hpf.ContentType,
                    Descripcion = archivo.Descripcion,
                    Id = archivo.Id
                });
            }
            return Json(new { files = r });
        }


        [HttpPost]
        public JsonResult Upload(int agente)
        {
            var r = new List<ViewDataUploadFilesResult>();
            foreach (string file in Request.Files)
            {
                HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

                if (hpf.ContentLength == 0)
                    continue;
                string savedFileName = Path.Combine(Server.MapPath("~/Files/"), agente.ToString()+"_"+Path.GetFileName(hpf.FileName));
                hpf.SaveAs(savedFileName);     

                r.Add(new ViewDataUploadFilesResult()
                {
                    Name = hpf.FileName,
                    Length = hpf.ContentLength,
                    Type = hpf.ContentType,
                    Descripcion = "",
                    Id = 0
                });
            }
            return Json(new { files = r });
        }

        [HttpPost]
        public JsonResult UploadFilesLicencia(int agente, int carpetaMedica)
        {
            var oImagenes = new ImagenesrrhhAD();

            var r = new List<ViewDataUploadFilesResult>();
            foreach (string file in Request.Files)
            {
                Imagenesrrhh archivo = new Imagenesrrhh();

                HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

                archivo.Nombre = "Certificado Médico";
                archivo.Agente = agente;
                archivo.Usuario = SessionHelper.IdUsuario.Value;
                archivo.FechaDeCarga = DateTime.Now;
                archivo.FechaUltimaActualizacion = DateTime.Now;
                archivo.Categoria = (int)eTiposArchivosAdjuntos.Carpetas_Medicas;
                archivo.Imagen = SSO.SGP.Web.Helpers.HelperManagerFile.UploadFile(agente,hpf, archivo.Categoria);

                oImagenes.Guardar(archivo);

                r.Add(new ViewDataUploadFilesResult()
                {
                    Name = hpf.FileName,
                    Length = hpf.ContentLength,
                    Type = hpf.ContentType,
                    Descripcion = archivo.Nombre,
                    Id = archivo.Id
                });
            }
            return Json(new { files = r });
        }


        [HttpPost]
        public JsonResult UploadFilesAgente(int agente, string nombre)
        {
            var oImagenes = new ImagenesrrhhAD();
            var r = new List<ViewDataUploadFilesResult>();
            foreach (string file in Request.Files)
            {
                Imagenesrrhh archivo = new Imagenesrrhh();

                HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

                archivo.Nombre = nombre;
                archivo.Imagen = hpf.FileName;
                archivo.Agente = agente;
                //archivo.Path = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName));               
                archivo.Usuario = SessionHelper.IdUsuario.Value;
                archivo.FechaDeCarga = DateTime.Now;
                archivo.FechaUltimaActualizacion = DateTime.Now;
                archivo.Categoria = 3;

                if (hpf.ContentLength == 0)
                    continue;
                string savedFileName = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName));
                hpf.SaveAs(savedFileName);

                this.oImagenes.Guardar(archivo);

                r.Add(new ViewDataUploadFilesResult()
                {
                    Name = hpf.FileName,
                    Length = hpf.ContentLength,
                    Type = hpf.ContentType,
                    Descripcion = archivo.Nombre,
                    Id = archivo.Id
                });
            }
            return Json(new { files = r });
        }

        [HttpPost]
        public JsonResult UploadImageProfile(int agente)
        {
            var oAgentes = new AgentesAD();

            var r = new List<ViewDataUploadFilesResult>();
            foreach (string file in Request.Files)
            {
                Imagenesrrhh archivo = new Imagenesrrhh();

                HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

                archivo.Nombre = hpf.FileName;
                archivo.Imagen = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName)); 
                //archivo.Path = Path.Combine(Server.MapPath("~/Files/"), Path.GetFileName(hpf.FileName));               
                archivo.Usuario = SessionHelper.IdUsuario.Value;
                archivo.FechaDeCarga = DateTime.Now;
                archivo.Agente = agente;
                archivo.FechaUltimaActualizacion = DateTime.Now;
                archivo.Categoria = 5;

                if (hpf.ContentLength == 0)
                    continue;
                string savedFileName = Path.Combine(Server.MapPath("~/Files/perfiles/"), Path.GetFileName(agente.ToString()+"_"+hpf.FileName));
                hpf.SaveAs(savedFileName);

                this.oImagenes.Guardar(archivo);

                r.Add(new ViewDataUploadFilesResult()
                {
                    Name = hpf.FileName,
                    Length = hpf.ContentLength,
                    Type = hpf.ContentType,
                    Descripcion = archivo.Imagen,
                    Id = archivo.Id
                });

                var a = oAgentes.ObtenerPorId(agente);

            }
            return Json(new { files = r });
        }

        //[HttpPost]
        //public JsonResult UploadDocument()
        //{
        //    var r = new List<ViewDataUploadFilesResult>();
        //    foreach (string file in Request.Files)
        //    {
        //        ExpedientesDocumentosadm archivo = new ExpedientesDocumentosadm();

        //        HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;

        //        archivo.Nombre = hpf.FileName;
        //        archivo.Path = Path.Combine(Server.MapPath("~/Files/Documentos/"), Path.GetFileName(hpf.FileName));

        //        if (hpf.ContentLength == 0)
        //            continue;
        //        string savedFileName = Path.Combine(Server.MapPath("~/Files/Documentos/"), Path.GetFileName(hpf.FileName));
        //        hpf.SaveAs(savedFileName);

        //        this.oArchivosAdjuntos.Guardar(archivo);

        //        r.Add(new ViewDataUploadFilesResult()
        //        {
        //            Name = hpf.FileName,
        //            Length = hpf.ContentLength,
        //            Type = hpf.ContentType,
        //            Descripcion = archivo.Descripcion,
        //            Id = archivo.Id
        //        });
        //    }
        //    return Json(new { files = r });
        //}


        //[HttpPost]
        //public ActionResult Crear(ArchivosAdjuntos archivosadjuntos)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        try
        //        {
        //            //oArchivosAdjuntos.FechaAlta = DateTime.Now;
        //            //oArchivosAdjuntos.UsuarioAlta = SessionHelper.IdUsuario.Value;
        //            //oArchivosAdjuntos.UsuarioModifica = SessionHelper.IdUsuario.Value;
        //            //oArchivosAdjuntos.FechaModifica = DateTime.Now;
        //            oArchivosAdjuntos.Guardar(archivosadjuntos);
        //            return Json(new object[] { true, String.Format("Operación satisfactoria"), archivosadjuntos.Id });
        //        }
        //        catch (Exception ex)
        //        {
        //            Logger.GrabarExcepcion(ex, false);
        //            return Json(new object[] { false, "No se ha podido procesar la operación" });
        //        }
        //    }
        //    else
        //    {
        //        return Json(new object[] { false, "Ha ocurrido un error en la validación" });
        //    }
        //}

        //[HttpPost]
        //public ActionResult Editar(ArchivosAdjuntos archivosadjuntos)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        try
        //        {
        //            oArchivosAdjuntos.Guardar(archivosadjuntos);
        //            return Json(new object[] { true, String.Format("Operación satisfactoria") });
        //        }
        //        catch (Exception ex)
        //        {
        //            Logger.GrabarExcepcion(ex, false);
        //            return Json(new object[] { false, "No se ha podido procesar la operación" });
        //        }
        //    }
        //    else
        //    {
        //        return Json(new object[] { false, "Ha ocurrido un error en la validació" });
        //    }
        //}

        [HttpPost, ActionName("Eliminar")]
        public ActionResult EliminarConfirmado(int id)
        {
            try
            {
                oArchivosAdjuntos.Eliminar(id);
                return Json(new object[] { true, "La operación se realizó satisfactoriamente" });
            }
            catch (Exception)
            {
                return Json(new object[] { false, "No pudo eliminarse el elementos" });
            }

        }


        #endregion

        #region JsonResult

        public DataTablesResult<ImagenesrrhhView> getAdjuntosAgenteGrid(DataTablesParam dataTableParam, int? id)
        {
            var oImagenes = new ImagenesrrhhAD();
            return DataTablesResult.Create(this.oImagenes.ObtenerParaGrilla(id.Value), dataTableParam, x => x);
        }

        //public JsonResult Options()
        //{
        //    var res = from x in this.oArchivosAdjuntos.ObtenerOptions()
        //              select x;
        //    return this.Json(res, JsonRequestBehavior.AllowGet);
        //}

        //public JsonResult Table(string term)
        //{
        //    var res = from x in this.oArchivosAdjuntos.JsonT(term)
        //              select x;
        //    return this.Json(res, JsonRequestBehavior.AllowGet);
        //}

        //public JsonResult GetData(int id)
        //{
        //    return this.Json(this.oArchivosAdjuntos.ObtenerPorId(id), JsonRequestBehavior.AllowGet);
        //}

        //public JsonResult Autocomplete(string term)
        //{
        //    var res = from x in this.oArchivosAdjuntos.ObtenerAutocomplete(term)
        //              select new { id = x.Id, label = x.Id.ToString() };
        //    return this.Json(res, JsonRequestBehavior.AllowGet);
        //}

        #endregion

        protected override void Dispose(bool disposing)
        {
            //oArchivosAdjuntos.Dispose();
            //oSentencias.Dispose();
            //oSumarios.Dispose();

            base.Dispose(disposing);
        }


    }
}
