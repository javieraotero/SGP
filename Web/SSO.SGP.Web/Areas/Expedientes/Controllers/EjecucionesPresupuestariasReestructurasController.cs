using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SSO.SGP.EntidadesDeNegocio;
using Syncrosoft.Framework.Controles.Mvc.JQuery.Datatables;
using SSO.SGP.AccesoADatos;
using SSO.SGP.EntidadesDeNegocio.Vistas;
using System;
using System.Data;
using System.Collections.Generic;
using System.IO;
using Syncrosoft.Framework.Utils.Logs;

/// <summary>
///  CODE GENERATED BY Xeus Technology 
///  Date: 31/10/2017 8:24:41
///  Version: 3
/// <summary>
namespace SSO.SGP.Web.Areas.Expedientes.Controllers
{
    public class EjecucionesPresupuestariasReestructurasController : Controller
    {
        private EjecucionesPresupuestariasReestructurasAD oEjecucionesPresupuestariasReestructuras = new EjecucionesPresupuestariasReestructurasAD();
        private EjecucionesPresupuestariasAD oEjecuciones = new EjecucionesPresupuestariasAD();

        #region Views

        public ActionResult Default()
        {
            return View();
        }

        public ActionResult Index()
        {
            return View();
        }
        public ActionResult Crear()
        {
            return View();
        }

        public ActionResult Editar(int id = 0)
        {
            EjecucionesPresupuestariasReestructuras ejecucionespresupuestariasreestructuras = oEjecucionesPresupuestariasReestructuras.ObtenerPorId(id);
            if (ejecucionespresupuestariasreestructuras == null)
            {
                return HttpNotFound();
            }
            return View(ejecucionespresupuestariasreestructuras);
        }

        #endregion

        #region HttpPost

        [HttpPost]
        public ActionResult Crear(EjecucionesPresupuestariasReestructuras ejecucionespresupuestariasreestructuras)
        {

            ejecucionespresupuestariasreestructuras.FechaAlta = DateTime.Now;
            ejecucionespresupuestariasreestructuras.UsuarioAlta = SessionHelper.IdUsuario.Value;

            if (ModelState.IsValid)
            {
                try
                {
                    if (!ejecucionespresupuestariasreestructuras.ImporteOtorgado.HasValue)
                        ejecucionespresupuestariasreestructuras.ImporteOtorgado = 0;

                    oEjecucionesPresupuestariasReestructuras.Guardar(ejecucionespresupuestariasreestructuras);

                    //se obtiene la ejecucion presupuestaria para actualizar credito habilitado y reestructura mas/menos
                    var e = oEjecuciones.ObtenerPorPartidaYAnio(ejecucionespresupuestariasreestructuras.Anio, ejecucionespresupuestariasreestructuras.PartidaPresupuestaria);
                    if (e != null) {
                        if (ejecucionespresupuestariasreestructuras.Tipo != (int)eTiposDeReestructura.Habilitacion)
                        {
                            if (ejecucionespresupuestariasreestructuras.ImporteOtorgado > 0)
                            {
                                e.ReestructuraMas += ejecucionespresupuestariasreestructuras.Importe;
                                e.CreditoActual += ejecucionespresupuestariasreestructuras.Importe;
                            }
                            else
                            {
                                e.ReestructuraMenos += ejecucionespresupuestariasreestructuras.Importe;
                                e.CreditoActual += ejecucionespresupuestariasreestructuras.Importe;
                            }
                        }

                        //es habilitacion
                        if (ejecucionespresupuestariasreestructuras.Tipo == (int)eTiposDeReestructura.Habilitacion)
                        {
                            e.ReservaMenos += ejecucionespresupuestariasreestructuras.Importe;
                            e.CreditoHabilitado += ejecucionespresupuestariasreestructuras.Importe;
                        }

                        var habilitado = e.ReservaMenos + e.ReestructuraMas + e.ReestructuraMenos;
                        var disponible = habilitado - e.MontoPreventiva;

                        e.CreditoHabilitado = habilitado.Value;
                        e.CreditoDisponible = disponible.Value;
                   

                        oEjecuciones.Actualizar(e);

                    }

                    return Json(new object[] { true, String.Format("Se generó la reestructura satisfactoriamente"), ejecucionespresupuestariasreestructuras.Id });
                }
                catch (Exception ex)
                {
                    Logger.GrabarExcepcion(ex, false);
                    return Json(new object[] { false, "No se ha podido generar la reestructura" });
                }
            }
            else
            {
                return Json(new object[] { false, "Ha ocurrido un error en la validación" });
            }
        }

        [HttpPost]
        public ActionResult Editar(EjecucionesPresupuestariasReestructuras ejecucionespresupuestariasreestructuras)
        {
            if (ModelState.IsValid)
            {
                try
                {

                    oEjecucionesPresupuestariasReestructuras.Guardar(ejecucionespresupuestariasreestructuras);
                    return Json(new object[] { true, String.Format("Operación satisfactoria") });
                }
                catch (Exception ex)
                {
                    Logger.GrabarExcepcion(ex, false);
                    return Json(new object[] { false, "No se ha podido procesar la operación" });
                }
            }
            else
            {
                return Json(new object[] { false, "Ha ocurrido un error en la validació" });
            }
        }

        [HttpPost, ActionName("Eliminar")]
        public ActionResult EliminarConfirmado(int id)
        {
            try
            {
                var r = oEjecucionesPresupuestariasReestructuras.ObtenerPorId(id);

                var e = oEjecuciones.ObtenerPorPartidaYAnio(r.Fecha.Year, r.PartidaPresupuestaria);
                if (e != null)
                {
                    if (r.Tipo != (int)eTiposDeReestructura.Habilitacion)
                    {
                        if (r.ImporteOtorgado > 0)
                        {
                            e.ReestructuraMas -= r.ImporteOtorgado.Value;
                            e.CreditoActual -= r.ImporteOtorgado.Value;
                        }
                        else
                        {
                            e.ReestructuraMenos -= r.ImporteOtorgado.Value;
                            e.CreditoActual -= r.ImporteOtorgado.Value;
                        }
                    }

                    //es habilitacion
                    if (r.Tipo == (int)eTiposDeReestructura.Habilitacion)
                    {
                        e.ReservaMenos -= r.ImporteOtorgado.Value;
                        e.CreditoHabilitado -= r.ImporteOtorgado.Value;
                    }

                    var habilitado = e.ReservaMenos + e.ReestructuraMas + e.ReestructuraMenos;
                    var disponible = habilitado - e.MontoPreventiva;

                    e.CreditoHabilitado = habilitado.Value;
                    e.CreditoDisponible = disponible.Value;

                    oEjecuciones.Actualizar(e);

                }
                r = null;

                oEjecucionesPresupuestariasReestructuras.Eliminar(id);

                return Json(new object[] { true, "La operación se realizó satisfactoriamente" });
            }
            catch (Exception)
            {
                return Json(new object[] { false, "No pudo eliminarse la reestructura" });
            }

        }


        #endregion

        #region JsonResult

        public DataTablesResult<EjecucionesPresupuestariasReestructurasView> getEjecucionesPresupuestariasReestructurasGrid(DataTablesParam dataTableParam)
        {
            return DataTablesResult.Create(this.oEjecucionesPresupuestariasReestructuras.ObtenerParaGrilla(), dataTableParam, x => x);
        }

        public JsonResult Options()
        {
            var res = from x in this.oEjecucionesPresupuestariasReestructuras.ObtenerOptions("")
                      select x;
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        //public JsonResult Table(string term)
        //{
        //    var res = from x in this.oEjecucionesPresupuestariasReestructuras.JsonT(term)
        //              select x;
        //    return this.Json(res, JsonRequestBehavior.AllowGet);
        //}

        public JsonResult GetData(int id)
        {
            return this.Json(this.oEjecucionesPresupuestariasReestructuras.ObtenerPorId(id), JsonRequestBehavior.AllowGet);
        }

        //public JsonResult Autocomplete(string term)
        //{
        //    var res = from x in this.oEjecucionesPresupuestariasReestructuras.ObtenerAutocomplete(term)
        //              select new { id = x.Id, label = x.Id.ToString() };
        //    return this.Json(res, JsonRequestBehavior.AllowGet);
        //}

        #endregion

        protected override void Dispose(bool disposing)
        {
            //oEjecucionesPresupuestariasReestructuras.Dispose();

            base.Dispose(disposing);
        }


    }
}
