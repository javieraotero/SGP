using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SSO.SGP.EntidadesDeNegocio;
using Syncrosoft.Framework.Controles.Mvc.JQuery.Datatables;
using SSO.SGP.AccesoADatos;
using SSO.SGP.EntidadesDeNegocio.Vistas;
using System;
using System.Data;
using System.Collections.Generic;
using System.IO;
using Syncrosoft.Framework.Utils.Logs;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using SSO.SGP.Web.Areas.RRHH.Models;
using SSO.SGP.Web.Controllers;

/// <summary>
///  CODE GENERATED BY Xeus Technology 
///  Date: 15/03/2018 10:52:11
///  Version: 3
/// <summary>
namespace SSO.SGP.Web.Areas.RRHH.Controllers
{
    public class ConcursosDeIngresoController : Controller
    {
        private ConcursosDeIngresoAD oConcursosDeIngreso = new ConcursosDeIngresoAD();
        private OrganismosRefAD oOrganismosRef = new OrganismosRefAD();
        private CargosRefAD oCargosRef = new CargosRefAD();
        private ConcursosDeIngresoInscripcionesAD oInscripciones = new ConcursosDeIngresoInscripcionesAD();
        private ConcursosDeIngresoEvaluacionesAD oEvaluacoines = new ConcursosDeIngresoEvaluacionesAD();
        private ConcursosDeIngresoPreguntasAD oPreguntas = new ConcursosDeIngresoPreguntasAD();
        private ConcursosDeIngresoRespuestasAD oRespuestas = new ConcursosDeIngresoRespuestasAD();
        private ConcursosInscripcionesEvaluacionesAD oInscripcionEvaluacion = new ConcursosInscripcionesEvaluacionesAD();       

        #region Views

        public ActionResult Default()
        {
            return View();
        }

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult EnviarNotificaciones(int id)
        {
            ViewBag.Concurso = id;
            return View();
        }

        public ActionResult Evaluaciones(int id)
        {
            ViewBag.Id = id;
            return View();
        }

        public ActionResult Crear()
        {
            ViewBag.Organismo = oOrganismosRef.ObtenerOptions("").ToList();
            ViewBag.Cargo = oCargosRef.ObtenerOptions("").ToList();
            return View();
        }

        public ActionResult Editar(int id = 0)
        {
            ViewBag.Organismo = oOrganismosRef.ObtenerOptions("").ToList();
            ViewBag.Cargo = oCargosRef.ObtenerOptions("").ToList();

            ConcursosDeIngreso concursosdeingreso = oConcursosDeIngreso.ObtenerPorId(id);
            if (concursosdeingreso == null)
            {
                return HttpNotFound();
            }
            return View(concursosdeingreso);
        }

        #endregion

        #region HttpPost

        [HttpGet]
        public JsonResult GetShortURL(string longUrl)
        {
            WebRequest request = WebRequest.Create("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD_0CEBhQBlhBOs1VUQA3tNeRsbXjJY2Pk");
            request.Method = "POST";
            request.ContentType = "application/json";
            string requestData = string.Format(@"{{""longUrl"": ""{0}""}}", longUrl);
            byte[] requestRawData = Encoding.ASCII.GetBytes(requestData);
            request.ContentLength = requestRawData.Length;
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(requestRawData, 0, requestRawData.Length);
            requestStream.Close();

            WebResponse response = request.GetResponse();
            StreamReader responseReader = new StreamReader(response.GetResponseStream());
            string responseData = responseReader.ReadToEnd();
            responseReader.Close();

            var deserializer = new JavaScriptSerializer();
            var results = deserializer.Deserialize<GoogleResponse>(responseData);
            return this.Json(results, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CorregirPendientes(int id)
        {          
            try
            {
                var examen = oEvaluacoines.ObtenerPorId(id);

                if (examen.FechaFin < DateTime.Now)
                {
                    var evaluaciones_pendientes = oInscripcionEvaluacion.ObtenerPendientes(id);
                    int corregidos = 0;

                    foreach (var ev in evaluaciones_pendientes)
                    {
                        var preguntas = this.oEvaluacoines.ObtenerPreguntas2(id, ev.Id);
                        var respuestas = this.oEvaluacoines.ObtenerRespuestasInscripto(ev.Id);

                        int correctas = 0;
                        int total_preguntas = preguntas.Count();

                        foreach (var p in preguntas)
                        {

                            //obtener la correcta
                            var correcta = p.respuestas.Where(x => x.es_correcta).FirstOrDefault().id;

                            if (respuestas.Where(x => x.pregunta == p.id && x.respuesta == correcta).Count() > 0)
                                correctas++;

                        }

                        ev.Porcentaje = ((decimal)correctas / (decimal)total_preguntas) * 100;
                        ev.FechaConfirmacion = DateTime.Now;
                        oInscripcionEvaluacion.Actualizar(ev);

                        corregidos++;
                    }

                    return Json(new object[] { true, String.Format("Operación satisfactoria"), corregidos });
                }
                else {
                    return Json(new object[] { false, String.Format("El exámen aún no ha finalizado"), 0 });
                }
                 
               
            }
            catch (Exception ex)
            {
                Logger.GrabarExcepcion(ex, false);
                return Json(new object[] { false, "No se ha podido procesar la operación" });
            }


        }

        [HttpPost]
        public ActionResult Crear(ConcursosDeIngreso concursosdeingreso)
        {

            concursosdeingreso.FechaAlta = DateTime.Now;
            concursosdeingreso.UsuarioAlta = SessionHelper.IdUsuario.Value;
            concursosdeingreso.Activo = true;

            try
            {
                oConcursosDeIngreso.Guardar(concursosdeingreso);
                return Json(new object[] { true, String.Format("Operación satisfactoria"), concursosdeingreso.Id });
            }
            catch (Exception ex)
            {
                Logger.GrabarExcepcion(ex, false);
                return Json(new object[] { false, "No se ha podido procesar la operación" });
            }


        }


        [HttpPost]
        public ActionResult GuardarEvaluacion(ConcursosDeIngresoEvaluaciones evaluacion) {
            try
            {
                if (evaluacion.Id > 0)
                {
                    oEvaluacoines.Actualizar(evaluacion);
                }
                else {
                    evaluacion.Activa = true;
                    oEvaluacoines.Guardar(evaluacion);
                }

                return Json(new object[] { true, "Se ha guardaro la evaluación satisfactoriamente" });

            }
            catch (Exception e) {
                return Json(new object[] { false, "No se ha podido guardar la evaluación" });
            }

        }

        [HttpPost]
        public ActionResult GuardarPregunta(ConcursosDeIngresoPreguntas pregunta)
        {
            try
            {
                if (pregunta.Id > 0)
                {
                    oPreguntas.Actualizar(pregunta);
                }
                else
                {
                    oPreguntas.Guardar(pregunta);
                }

                return Json(new object[] { true, "La pregunta se guardó satisfactoriamente", pregunta.Id });

            }
            catch (Exception e)
            {   
                return Json(new object[] { false, "No se ha podido guardar la pregunta", 0 });
            }

        }

        [HttpPost]
        public ActionResult GuardarRespuesta(ConcursosDeIngresoRespuestas respuesta)
        {
            try
            {
                if (respuesta.Id > 0)
                {
                    oRespuestas.Actualizar(respuesta);
                }
                else
                {
                    respuesta.Activa = true;
                    oRespuestas.Guardar(respuesta);
                }

                return Json(new object[] { true, "La respuesta se guardó satisfactoriamente", respuesta.Id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "No se ha podido guardar la respuesta", 0 });
            }

        }

        [HttpPost]
        public ActionResult actualizarRespuesta(int id, bool es_correcta)
        {
            try
            {
                var respuesta = oRespuestas.ObtenerPorId(id);
                respuesta.EsCorrecta = es_correcta;
                oRespuestas.Actualizar(respuesta);
                

                return Json(new object[] { true, "La respuesta se guardó satisfactoriamente", respuesta.Id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "No se ha podido guardar la respuesta", 0 });
            }

        }

        [HttpPost]
        public ActionResult guardarTextoRespuesta(int id, string texto)
        {
            try
            {
                var respuesta = oRespuestas.ObtenerPorId(id);
                respuesta.Respuesta = texto;
                oRespuestas.Actualizar(respuesta);


                return Json(new object[] { true, "La respuesta se guardó satisfactoriamente", respuesta.Id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "No se ha podido guardar la respuesta", 0 });
            }

        }

        [HttpPost]
        public ActionResult desactivarExamen(int id, bool activa)
        {
           
            try
            {
                var evaluacion = oEvaluacoines.ObtenerPorId(id);
                evaluacion.Activa = activa;
                oEvaluacoines.Actualizar(evaluacion);

                return Json(new object[] { true, "El examen ha sido " + (activa ? "activado" : "desactivado"), id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "No se ha podido " + (activa ? "activar" : "desactivar") + " el examen", 0 });
            }

        }

        [HttpPost]
        public ActionResult desactivarRespuesta(int id, bool activa)
        {

            try
            {
                var respuesta = oRespuestas.ObtenerPorId(id);
                respuesta.Activa = activa;
                oRespuestas.Actualizar(respuesta);

                return Json(new object[] { true, "La respuesta ha sido " + (activa ? "activada" : "desactivada"), id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "La respuesta no ha podido ser " + (activa ? "activada" : "desactivada"), 0 });
            }

        }

        [HttpPost]
        public ActionResult desactivarPregunta(int id, bool activa)
        {

            try
            {
                var pregunta = oPreguntas.ObtenerPorId(id);
                pregunta.Activa = activa;
                oPreguntas.Actualizar(pregunta);

                return Json(new object[] { true, "La pregunta ha sido " + (activa ? "activada" : "desactivada"), id });

            }
            catch (Exception e)
            {
                return Json(new object[] { false, "La pregunta no ha podido ser " + (activa ? "activada" : "desactivada"), 0 });
            }

        }

        //[HttpPost]
        //[ValidateInput(false)]
        //public ActionResult recordarEvaluacion(int evaluacion)
        //{
        //    int ok = 0;
        //    int error = 0;

        //    var ev = oEvaluacoines.ObtenerPorId(evaluacion);

        //    var i = oInscripciones.ObtenerPorConcurso(ev.Concurso);

        //    foreach (var x in i)
        //    {
        //        try
        //        {
        //            new MailController().NotificacionConcurso(n, x.Email).Deliver();
        //            ok++;
        //        }
        //        catch (Exception e)
        //        {
        //            error++;
        //        }
        //    }

        //    //enviar copia a correo de recursos humanos
        //    new MailController().NotificacionConcurso(n, "jotero@juslapampa.gob.ar").Deliver();


        //    return Json(new object[] { true, "Se enviaron " + ok.ToString() + " correos. " + error + " fallas" });
        //}


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult EnviarNotificaciones(SSO.SGP.Web.Areas.RRHH.Models.Notificaciones n)
        {
            int ok = 0;
            int error = 0;
            //var i = oInscripciones.ObtenerPorConcurso(n.Concurso);          

            var i = oInscripciones.ObtenerPorConcursoValidados(n.Concurso);
            var o = oConcursosDeIngreso.ObtenerPorId(n.Concurso);

            foreach (var x in i)
            {
                //var iev = oInscripcionEvaluacion.ObtenerPorMailYEvaluacion(x.Email, 8);

                var evaluaciones_anteriores = oEvaluacoines.ObtenerPorEvaluacion(o.Id).Where(z => z.FechaInicio < DateTime.Now.Date).ToList();

                var validado = true;

                foreach (var e in evaluaciones_anteriores)
                {

                    var evaluacion_anterior = oInscripcionEvaluacion.ObtenerPorEvaluacionYDni(e.Id, x.DNI.Value);

                    if (evaluacion_anterior != null)
                    {

                        if (!evaluacion_anterior.Porcentaje.HasValue)
                            validado = false;

                        if (evaluacion_anterior.Porcentaje.HasValue && evaluacion_anterior.Porcentaje < 70)
                            validado = false;

                    }
                    else
                    {
                        validado = false;
                    }

                }

                if (validado)
                {
                    try
                    {
                        new MailController().NotificacionConcurso(n, x.Email).Deliver();
                        ok++;
                    }
                    catch (Exception e)
                    {
                        error++;
                    }
                }
            }

            //enviar copia a correo de recursos humanos
            new MailController().NotificacionConcurso(n, "jotero@juslapampa.gob.ar").Deliver();


            return Json(new object[] { true, "Se enviaron " + ok.ToString() + " correos. " + error + " fallas" });
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult EnviarRecordatorio(int id)
        {
            int ok = 0;
            int error = 0;
            var ev = oEvaluacoines.ObtenerPorId(id);

            var i = oInscripciones.ObtenerPorConcursoValidados(ev.Concurso);
            var o = oConcursosDeIngreso.ObtenerPorId(ev.Concurso);

            foreach (var x in i)
            {
                var iev = oInscripcionEvaluacion.ObtenerPorMailYEvaluacion(x.Email, id);

                var evaluaciones_anteriores = oEvaluacoines.ObtenerPorEvaluacion(o.Id).Where(z => z.FechaInicio < DateTime.Now.Date).ToList();

                var validado = true;

                foreach (var e in evaluaciones_anteriores)
                {

                    var evaluacion_anterior = oInscripcionEvaluacion.ObtenerPorEvaluacionYDni(e.Id, x.DNI.Value);

                    if (evaluacion_anterior != null)
                    {

                        if (!evaluacion_anterior.Porcentaje.HasValue)
                            validado = false;

                        if (evaluacion_anterior.Porcentaje.HasValue && evaluacion_anterior.Porcentaje < 70)
                            validado = false;

                    }
                    else
                    {
                        validado = false;
                    }

                }

                if (iev == null && validado)
                {
                    try
                    {
                        // new MailController().RecordarEvaluacion(ev, x.Email, o.Descripcion, ev.Descripcion).Deliver();
                        ok++;
                    }
                    catch (Exception e)
                    {
                        error++;
                    }
                }
            }

            //enviar copia a correo de recursos humanos
            //new MailController().NotificacionConcurso(ev, "jotero@juslapampa.gob.ar").Deliver();


            return Json(new object[] { true, "Se enviaron " + ok.ToString() + " correos. " + error + " fallas" });
        }

        [HttpPost]
        public ActionResult Editar(ConcursosDeIngreso concursosdeingreso)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    concursosdeingreso.Activo = true;
                    oConcursosDeIngreso.Actualizar(concursosdeingreso);
                    return Json(new object[] { true, String.Format("Operación satisfactoria") });
                }
                catch (Exception ex)
                {
                    Logger.GrabarExcepcion(ex, false);
                    return Json(new object[] { false, "No se ha podido procesar la operación" });
                }
            }
            else
            {
                return Json(new object[] { false, "Ha ocurrido un error en la validació" });
            }
        }

        [HttpPost, ActionName("Eliminar")]
        public ActionResult EliminarConfirmado(int id)
        {
            try
            {
                oConcursosDeIngreso.Eliminar(id);

                return Json(new object[] { true, "La operación se realizó satisfactoriamente" });
            }
            catch (Exception)
            {
                return Json(new object[] { false, "No pudo eliminarse el elementos" });
            }

        }


        #endregion

        #region JsonResult

        public DataTablesResult<ConcursosDeIngresoView> getConcursosDeIngresoGrid(DataTablesParam dataTableParam)
        {
            return DataTablesResult.Create(this.oConcursosDeIngreso.ObtenerParaGrilla(), dataTableParam, x => x);
        }

        public JsonResult Options()
        {
            var res = from x in this.oConcursosDeIngreso.ObtenerOptions("")
                      select x;
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Table(string term)
        {
            var res = from x in this.oConcursosDeIngreso.JsonT(term)
                      select x;
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetData(int id)
        {
            return this.Json(this.oConcursosDeIngreso.ObtenerPorId(id), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetEvaluaciones(int id)
        {
            return this.Json(this.oEvaluacoines.ObtenerPorEvaluacion(id), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPreguntas(int evaluacion) {
            return this.Json(this.oEvaluacoines.ObtenerPreguntas(evaluacion), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetResultados(int id)
        {
            return this.Json(this.oEvaluacoines.ObtenerResultados(id), JsonRequestBehavior.AllowGet);
        }

        public JsonResult Autocomplete(string term)
        {
            var res = from x in this.oConcursosDeIngreso.ObtenerOptions(term)
                      select new { id = x.value, label = x.text };
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        #endregion

        protected override void Dispose(bool disposing)
        {
            //oConcursosDeIngreso.Dispose();
            //oOrganismosRef.Dispose();
            //oCargosRef.Dispose();

            base.Dispose(disposing);
        }


    }

    public class GoogleResponse
    {
        public string Kind { get; set; }
        public string Id { get; set; }
        public string LongUrl { get; set; }
    }

}
