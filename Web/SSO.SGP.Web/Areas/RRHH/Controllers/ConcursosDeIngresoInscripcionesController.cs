using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SSO.SGP.EntidadesDeNegocio;
using Syncrosoft.Framework.Controles.Mvc.JQuery.Datatables;
using SSO.SGP.AccesoADatos;
using SSO.SGP.EntidadesDeNegocio.Vistas;
using System;
using System.Data;
using System.Collections.Generic;
using System.IO;
using Syncrosoft.Framework.Utils.Logs;

/// <summary>
///  CODE GENERATED BY Xeus Technology 
///  Date: 15/03/2018 10:52:16
///  Version: 3
/// <summary>
namespace SSO.SGP.Web.Areas.RRHH.Controllers
{
    public class ConcursosDeIngresoInscripcionesController : Controller
    {
        private ConcursosDeIngresoInscripcionesAD oConcursosDeIngresoInscripciones = new ConcursosDeIngresoInscripcionesAD();


        #region Views

        public ActionResult Default()
        {
            return View();
        }

        public ActionResult Index(int id)
        {
            ViewBag.Id = id;
            return View();
        }
        public ActionResult Crear()
        {
            return View();
        }

        public ActionResult Editar(int id = 0)
        {
            ConcursosDeIngresoInscripciones concursosdeingresoinscripciones = oConcursosDeIngresoInscripciones.ObtenerPorId(id);
            if (concursosdeingresoinscripciones == null)
            {
                return HttpNotFound();
            }
            return View(concursosdeingresoinscripciones);
        }

        #endregion

        #region HttpPost

        [HttpPost]
        public ActionResult Crear(ConcursosDeIngresoInscripciones concursosdeingresoinscripciones)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    oConcursosDeIngresoInscripciones.Guardar(concursosdeingresoinscripciones);
                    return Json(new object[] { true, String.Format("Operación satisfactoria"), concursosdeingresoinscripciones.Id });
                }
                catch (Exception ex)
                {
                    Logger.GrabarExcepcion(ex, false);
                    return Json(new object[] { false, "No se ha podido procesar la operación" });
                }
            }
            else
            {
                return Json(new object[] { false, "Ha ocurrido un error en la validación" });
            }
        }

        [HttpPost]
        public ActionResult Editar(ConcursosDeIngresoInscripciones concursosdeingresoinscripciones)
        {
            if (ModelState.IsValid)
            {
                try
                {

                    oConcursosDeIngresoInscripciones.Guardar(concursosdeingresoinscripciones);
                    return Json(new object[] { true, String.Format("Operación satisfactoria") });
                }
                catch (Exception ex)
                {
                    Logger.GrabarExcepcion(ex, false);
                    return Json(new object[] { false, "No se ha podido procesar la operación" });
                }
            }
            else
            {
                return Json(new object[] { false, "Ha ocurrido un error en la validació" });
            }
        }

        [HttpPost]
        public ActionResult Confirmar (int id)
        {

            try
            {
                var i = oConcursosDeIngresoInscripciones.ObtenerPorId(id);

                if (i.FechaRecepcion.HasValue)
                {
                    i.FechaRecepcion = null;
                }
                else
                {
                    i.FechaRecepcion = DateTime.Now;                  
                }
                i.UsuarioRecepcion = SessionHelper.IdUsuario.Value;
                oConcursosDeIngresoInscripciones.Actualizar(i);

                return Json(new object[] { true, "Se " + (i.FechaRecepcion.HasValue ? "confirmó" : "reseteó" ) + " la preinscripción" });
            }
            catch (Exception e) {
                return Json(new object[] { false, "Ha ocurrido un error en la validació" });
            }
        }
       

        [HttpPost, ActionName("Eliminar")]
        public ActionResult EliminarConfirmado(int id)
        {
            try
            {
                oConcursosDeIngresoInscripciones.Eliminar(id);

                return Json(new object[] { true, "La operación se realizó satisfactoriamente" });
            }
            catch (Exception)
            {
                return Json(new object[] { false, "No pudo eliminarse el elementos" });
            }

        }


        #endregion

        #region JsonResult

        public DataTablesResult<ConcursosDeIngresoInscripcionesView> getConcursosDeIngresoInscripcionesGrid(DataTablesParam dataTableParam, int id)
        {
            return DataTablesResult.Create(this.oConcursosDeIngresoInscripciones.ObtenerParaGrilla(id), dataTableParam, x => x);
        }

        public JsonResult Options()
        {
            var res = from x in this.oConcursosDeIngresoInscripciones.ObtenerOptions("")
                      select x;
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Table(string term)
        {
            var res = from x in this.oConcursosDeIngresoInscripciones.JsonT(term)
                      select x;
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetData(int id)
        {
            return this.Json(this.oConcursosDeIngresoInscripciones.ObtenerPorId(id), JsonRequestBehavior.AllowGet);
        }

        public JsonResult Autocomplete(string term)
        {
            var res = from x in this.oConcursosDeIngresoInscripciones.ObtenerOptions(term)
                      select new { id = x.value, label = x.text.ToString() };
            return this.Json(res, JsonRequestBehavior.AllowGet);
        }

        #endregion

        protected override void Dispose(bool disposing)
        {
            //oConcursosDeIngresoInscripciones.Dispose();

            base.Dispose(disposing);
        }


    }
}
