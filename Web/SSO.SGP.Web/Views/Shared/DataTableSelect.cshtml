@using Syncrosoft.Framework.Controles.Mvc.JQuery.Datatables
@model DataTableVm
@{
 
}
<style>
        tr.even.row_selected {
        background-color: dodgerblue;
        color: white;
    }

    tr.odd.row_selected {
        background-color: dodgerblue;
        color: white;
    }
    .seleccion
    {
        font-size: x-large;
        font-weight: bold;
    }
</style>
<table id="@Model.Id" class="display @(Model.TableClass ?? DataTableVm.DefaultTableClass ?? "")">
    <thead>
        <tr>
            @foreach (var column in Model.Columns)
            {
                <th>@column.Item1
                </th>
            }
            @if ((Model.operators != null) && (Model.OpcionesEnGrilla))
            { 
                <th>
                    &nbsp;
                </th>
            }
        </tr>
        @if (Model.ColumnFilter)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.Item1
                    </th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="5" class="dataTables_empty">
                Cargando Datos...
            </td>
        </tr>
    </tbody>
</table>
<script type="text/javascript">
    var @Model.Id;
    $(document).ready(function() {     
        var $table = $('#@Model.Id');
        @Model.Id = $table.dataTable({
            "bProcessing": true,
            "oLanguage": { "sUrl": "@Url.Content("~/Scripts/DataTables-1.9.2/media/js/es.datatables.txt")" },
            "bJQueryUI": true,
			"sPaginationType": "full_numbers",
            "bStateSave": false,
            "bServerSide": true,
            @if (Model.CantidadRegistrosDefault != 0){
                <text>"iDisplayLength": @Model.CantidadRegistrosDefault,</text>
            }
            @if (Model.OrdenarPor != null){
                <text>"aaSorting": [
                    @foreach (var col in Model.OrdenarPor.Keys)
                    {
                        <text>[@col, '@Model.OrdenarPor[col]']</text>
                    }
                ],</text>
            }
            "aoColumns": [
              @{
                  var lastItem = Model.Columns.Last().Item1;
                  foreach (var column in Model.Columns)
                  {
                      /* Las columnas Id se ocultan */
                      if (column.Item1.ToUpper() == "ID")
                      {
                      @: { sDefaultContent: "", sWidth: "0px" }, 
                    }
                      else
                      {
                          if (column.Item1 != lastItem)
                          {
                            @:  { sDefaultContent: "-" },
                          }
                          else
                          {
                              if ((column.Item1 == lastItem) && (!Model.OpcionesEnGrilla))
                              {
                                @: { sDefaultContent: "-" },
                            }
                              else
                              {
                                 @: { sDefaultContent: "-"},
                            }
                          }
                      }
                  }
                  if (Model.OpcionesEnGrilla)
                  {
                    @: { sDefaultContent: "-", sWidth:"@(Model.operators.Length * 25)", "bSearchable": false }
                }
              }],
            
            @{
                if ((Model.operators != null) && (Model.OpcionesEnGrilla))
                {
            <text>
            "aoColumnDefs": [ {
                "aTargets": [ @Model.Columns.Count()],
                "fnRender": function (oObj) {
                    return '@{
                    for (int i = 0; i < Model.operators.Length; i++)
                    {
                            <text><a href="#" onclick="@Model.operators[i].function" title="@Model.operators[i].tooltip"><img src="@Model.operators[i].icon" /></a></text>;
                    }
                    }'
                 }
            }],
            </text>
                }
            }
            "bFilter": '@Model.ShowSearch.ToString().ToLower()',
            "sDom": '@Html.Raw(Model.Dom)',
            "aLengthMenu": [[10, 25, 50, -1], [10, 25, 50, "Todos"]],
            "sAjaxSource": "@Html.Raw(Model.AjaxUrl)", 
            "fnInitComplete": function() {
               //focus en el campo buscar del datatables
                $("div.dataTables_filter input").focus();
             },
            @{if (Model.OpcionesConextuales)
              {
                <text>"fnDrawCallback": fnRowMenu,</text>
              } 
            }
            "fnServerData": function(sSource, aoData, fnCallback) {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": fnCallback
                });
            }           
        });

//        var keys = new KeyTable( {
//        "table": document.getElementById('table-id2'),
//        "datatable": dt,
//        "focus": [1,0],
//        "focusClass":"seleccion"
//    } );

        @if (Model.ColumnFilter)
        {
<text>
            dt.columnFilter({
                sPlaceHolder: "head:before",
                aoColumns: [@Html.Raw(Model.ColumnFiltersString)]
            });
</text>
        }
    });

    function fnRowMenu ()
{      
    var horizontalPadding = 30;
    var verticalPadding = 30;
    var PARM1, PARM2;

    $.contextMenu({
        selector: '#@Model.Id tbody tr', 
        items: {
        @{ 
            if (Model.operators != null)
            {
                for (int i = 0; i < Model.operators.Length; i++)
                {
                    if (i != Model.operators.Length - 1)
                    {
               <text>
                 "@Model.operators[i].display": {name: "@Model.operators[i].display", icon: "@Model.operators[i].iconclass", callback: function(key, opt) {
                    @Model.operators[i].function
                 } },
               </text> 
                    }
                    else
                    {
               <text>
                 "@Model.operators[i].display": {name: "@Model.operators[i].display", icon: "@Model.operators[i].iconclass", callback: function(key, opt) {
                    @Model.operators[i].function
                 } }
               </text> 
                    }
                }
            }
        }
        },
//        callback: function(key, options) {
//            if (key == "edit") 
//                editar(this);
//            if (key == "delete") 
//                eliminar(this);     
//        },
    });
          
    return false;

}
</script>
